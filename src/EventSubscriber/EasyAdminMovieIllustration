<?php
namespace App\EventSubscriber;

use App\Entity\Movie;
use EasyCorp\Bundle\EasyAdminBundle\Event\BeforeEntityPersistedEvent;
use EasyCorp\Bundle\EasyAdminBundle\Event\BeforeEntityUpdatedEvent;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpKernel\KernelInterface;

class EasyAdminMovieIllustration implements EventSubscriberInterface
{
    private $appkernel;

    public function __construct(KernelInterface $appkernel)
    {
        $this->appkernel = $appkernel;
    }

    public static function getSubscribedEvents()
    {
        return [
            BeforeEntityPersistedEvent::class => ['setIllustration'],
            BeforeEntityUpdatedEvent::class => ['updateIllustration']
        ];
    }

    public function uploadIllustration($event)
    {
        $entity = $event->getEntityInstance();

        $tmp_name = $_FILES['Movie']['tmp_name']['image'];
        $filename = uniqid();
        $extension = pathinfo($tmp_name, PATHINFO_EXTENSION);

        $project_dir = $this->appkernel->getProjectDir();

        move_uploaded_file($tmp_name, $project_dir . '/public/uploads/' . $filename . '.' . $extension);

        $entity->setIllustration($filename . '.' . $extension);
    }

    public function updateIllustration(BeforeEntityUpdatedEvent $event)
    {
        if (!($event->getEntityInstance() instanceof Movie))
        {
            return;
        }
        if ($_FILES['Product']['tmp_name']['illustration'] != '')
        {
            $this->uploadIllustration($event);
        }
    }

    public function setIllustration(BeforeEntityPersistedEvent $event)
    {
        if (!($event->getEntityInstance() instanceof Movie))
        {
            return;
        }
        $this->uploadIllustration($event);
    }
}